{"version":3,"file":"reactlang.js.umd.min.js","sources":["../../node_modules/lang.js/src/lang.js","../../src/TranslationHelper.js","../../src/Translatable.js"],"sourcesContent":["/*!\n *  Lang.js for Laravel localization in JavaScript.\n *\n *  @version 1.1.12\n *  @license MIT https://github.com/rmariuzzo/Lang.js/blob/master/LICENSE\n *  @site    https://github.com/rmariuzzo/Lang.js\n *  @author  Rubens Mariuzzo <rubens@mariuzzo.com>\n */\n\n(function(root, factory) {\n    'use strict';\n\n    if (typeof define === 'function' && define.amd) {\n        // AMD support.\n        define([], factory);\n    } else if (typeof exports === 'object') {\n        // NodeJS support.\n        module.exports = factory();\n    } else {\n        // Browser global support.\n        root.Lang = factory();\n    }\n\n}(this, function() {\n    'use strict';\n\n    function inferLocale() {\n        if (typeof document !== 'undefined' && document.documentElement) {\n            return document.documentElement.lang;\n        }\n    };\n\n    function convertNumber(str) {\n        if (str === '-Inf') {\n            return -Infinity;\n        } else if (str === '+Inf' || str === 'Inf' || str === '*') {\n            return Infinity;\n        }\n        return parseInt(str, 10);\n    }\n\n    // Derived from: https://github.com/symfony/translation/blob/460390765eb7bb9338a4a323b8a4e815a47541ba/Interval.php\n    var intervalRegexp = /^({\\s*(\\-?\\d+(\\.\\d+)?[\\s*,\\s*\\-?\\d+(\\.\\d+)?]*)\\s*})|([\\[\\]])\\s*(-Inf|\\*|\\-?\\d+(\\.\\d+)?)\\s*,\\s*(\\+?Inf|\\*|\\-?\\d+(\\.\\d+)?)\\s*([\\[\\]])$/;\n    var anyIntervalRegexp = /({\\s*(\\-?\\d+(\\.\\d+)?[\\s*,\\s*\\-?\\d+(\\.\\d+)?]*)\\s*})|([\\[\\]])\\s*(-Inf|\\*|\\-?\\d+(\\.\\d+)?)\\s*,\\s*(\\+?Inf|\\*|\\-?\\d+(\\.\\d+)?)\\s*([\\[\\]])/;\n\n    // Default options //\n\n    var defaults = {\n        locale: 'en'/** The default locale if not set. */\n    };\n\n    // Constructor //\n\n    var Lang = function(options) {\n        options = options || {};\n        this.locale = options.locale || inferLocale() || defaults.locale;\n        this.fallback = options.fallback;\n        this.messages = options.messages;\n    };\n\n    // Methods //\n\n    /**\n     * Set messages source.\n     *\n     * @param messages {object} The messages source.\n     *\n     * @return void\n     */\n    Lang.prototype.setMessages = function(messages) {\n        this.messages = messages;\n    };\n\n    /**\n     * Get the current locale.\n     *\n     * @return {string} The current locale.\n     */\n    Lang.prototype.getLocale = function() {\n        return this.locale || this.fallback;\n    };\n\n    /**\n     * Set the current locale.\n     *\n     * @param locale {string} The locale to set.\n     *\n     * @return void\n     */\n    Lang.prototype.setLocale = function(locale) {\n        this.locale = locale;\n    };\n\n    /**\n     * Get the fallback locale being used.\n     *\n     * @return void\n     */\n    Lang.prototype.getFallback = function() {\n        return this.fallback;\n    };\n\n    /**\n     * Set the fallback locale being used.\n     *\n     * @param fallback {string} The fallback locale.\n     *\n     * @return void\n     */\n    Lang.prototype.setFallback = function(fallback) {\n        this.fallback = fallback;\n    };\n\n    /**\n     * This method act as an alias to get() method.\n     *\n     * @param key {string} The key of the message.\n     * @param locale {string} The locale of the message\n     *\n     * @return {boolean} true if the given key is defined on the messages source, otherwise false.\n     */\n    Lang.prototype.has = function(key, locale) {\n        if (typeof key !== 'string' || !this.messages) {\n            return false;\n        }\n\n        return this._getMessage(key, locale) !== null;\n    };\n\n    /**\n     * Get a translation message.\n     *\n     * @param key {string} The key of the message.\n     * @param replacements {object} The replacements to be done in the message.\n     * @param locale {string} The locale to use, if not passed use the default locale.\n     *\n     * @return {string} The translation message, if not found the given key.\n     */\n    Lang.prototype.get = function(key, replacements, locale) {\n        if (!this.has(key, locale)) {\n            return key;\n        }\n\n        var message = this._getMessage(key, locale);\n        if (message === null) {\n            return key;\n        }\n\n        if (replacements) {\n            message = this._applyReplacements(message, replacements);\n        }\n\n        return message;\n    };\n\n    /**\n     * This method act as an alias to get() method.\n     *\n     * @param key {string} The key of the message.\n     * @param replacements {object} The replacements to be done in the message.\n     *\n     * @return {string} The translation message, if not found the given key.\n     */\n    Lang.prototype.trans = function(key, replacements) {\n        return this.get(key, replacements);\n    };\n\n    /**\n     * Gets the plural or singular form of the message specified based on an integer value.\n     *\n     * @param key {string} The key of the message.\n     * @param count {number} The number of elements.\n     * @param replacements {object} The replacements to be done in the message.\n     * @param locale {string} The locale to use, if not passed use the default locale.\n     *\n     * @return {string} The translation message according to an integer value.\n     */\n    Lang.prototype.choice = function(key, number, replacements, locale) {\n        // Set default values for parameters replace and locale\n        replacements = typeof replacements !== 'undefined'\n            ? replacements\n            : {};\n\n        // The count must be replaced if found in the message\n        replacements.count = number;\n\n        // Message to get the plural or singular\n        var message = this.get(key, replacements, locale);\n\n        // Check if message is not null or undefined\n        if (message === null || message === undefined) {\n            return message;\n        }\n\n        // Separate the plural from the singular, if any\n        var messageParts = message.split('|');\n\n        // Get the explicit rules, If any\n        var explicitRules = [];\n\n        for (var i = 0; i < messageParts.length; i++) {\n            messageParts[i] = messageParts[i].trim();\n\n            if (anyIntervalRegexp.test(messageParts[i])) {\n                var messageSpaceSplit = messageParts[i].split(/\\s/);\n                explicitRules.push(messageSpaceSplit.shift());\n                messageParts[i] = messageSpaceSplit.join(' ');\n            }\n        }\n\n        // Check if there's only one message\n        if (messageParts.length === 1) {\n            // Nothing to do here\n            return message;\n        }\n\n        // Check the explicit rules\n        for (var j = 0; j < explicitRules.length; j++) {\n            if (this._testInterval(number, explicitRules[j])) {\n                return messageParts[j];\n            }\n        }\n\n        locale = locale || this._getLocale(key);\n        var pluralForm = this._getPluralForm(number, locale);\n\n        return messageParts[pluralForm];\n    };\n\n    /**\n     * This method act as an alias to choice() method.\n     *\n     * @param key {string} The key of the message.\n     * @param count {number} The number of elements.\n     * @param replacements {object} The replacements to be done in the message.\n     *\n     * @return {string} The translation message according to an integer value.\n     */\n    Lang.prototype.transChoice = function(key, count, replacements) {\n        return this.choice(key, count, replacements);\n    };\n\n    /**\n     * Parse a message key into components.\n     *\n     * @param key {string} The message key to parse.\n     * @param key {string} The message locale to parse\n     * @return {object} A key object with source and entries properties.\n     */\n    Lang.prototype._parseKey = function(key, locale) {\n        if (typeof key !== 'string' || typeof locale !== 'string') {\n            return null;\n        }\n\n        var segments = key.split('.');\n        var source = segments[0].replace(/\\//g, '.');\n\n        return {\n            source: locale + '.' + source,\n            sourceFallback: this.getFallback() + '.' + source,\n            entries: segments.slice(1)\n        };\n    };\n\n    /**\n     * Returns a translation message. Use `Lang.get()` method instead, this methods assumes the key exists.\n     *\n     * @param key {string} The key of the message.\n     * @param locale {string} The locale of the message\n     *\n     * @return {string} The translation message for the given key.\n     */\n    Lang.prototype._getMessage = function(key, locale) {\n        locale = locale || this.getLocale();\n        key = this._parseKey(key, locale);\n\n        // Ensure message source exists.\n        if (this.messages[key.source] === undefined && this.messages[key.sourceFallback] === undefined) {\n            return null;\n        }\n\n        // Get message from default locale.\n        var message = this.messages[key.source];\n        var entries = key.entries.slice();\n        var subKey = '';\n        while (entries.length && message !== undefined) {\n            var subKey = !subKey ? entries.shift() : subKey.concat('.', entries.shift());\n            if (message[subKey] !== undefined) {\n                message = message[subKey]\n                subKey = '';\n            }\n        }\n\n        // Get message from fallback locale.\n        if (typeof message !== 'string' && this.messages[key.sourceFallback]) {\n            message = this.messages[key.sourceFallback];\n            entries = key.entries.slice();\n            subKey = '';\n            while (entries.length && message !== undefined) {\n                var subKey = !subKey ? entries.shift() : subKey.concat('.', entries.shift());\n                if (message[subKey]) {\n                    message = message[subKey]\n                    subKey = '';\n                }\n            }\n        }\n\n        if (typeof message !== 'string') {\n            return null;\n        }\n\n        return message;\n    };\n\n    /**\n     * Return the locale to be used between default and fallback.\n     * @param {String} key\n     * @return {String}\n     */\n    Lang.prototype._getLocale = function(key) {\n        key = this._parseKey(key, this.locale)\n        if (this.messages[key.source]) {\n            return this.locale;\n        }\n        if (this.messages[key.sourceFallback]) {\n            return this.fallback;\n        }\n        return null;\n    };\n\n    /**\n     * Find a message in a translation tree using both dotted keys and regular ones\n     *\n     * @param pathSegments {array} An array of path segments such as ['family', 'father']\n     * @param tree {object} The translation tree\n     */\n    Lang.prototype._findMessageInTree = function(pathSegments, tree) {\n        while (pathSegments.length && tree !== undefined) {\n            var dottedKey = pathSegments.join('.');\n            if (tree[dottedKey]) {\n                tree = tree[dottedKey];\n                break;\n            }\n\n            tree = tree[pathSegments.shift()]\n        }\n\n        return tree;\n    };\n\n    /**\n     * Sort replacement keys by length in descending order.\n     *\n     * @param a {string} Replacement key\n     * @param b {string} Sibling replacement key\n     * @return {number}\n     * @private\n     */\n    Lang.prototype._sortReplacementKeys = function(a, b) {\n        return b.length - a.length;\n    };\n\n    /**\n     * Apply replacements to a string message containing placeholders.\n     *\n     * @param message {string} The text message.\n     * @param replacements {object} The replacements to be done in the message.\n     *\n     * @return {string} The string message with replacements applied.\n     */\n    Lang.prototype._applyReplacements = function(message, replacements) {\n        var keys = Object.keys(replacements).sort(this._sortReplacementKeys);\n\n        keys.forEach(function(replace) {\n            message = message.replace(new RegExp(':' + replace, 'gi'), function (match) {\n                var value = replacements[replace];\n\n                // Capitalize all characters.\n                var allCaps = match === match.toUpperCase();\n                if (allCaps) {\n                    return value.toUpperCase();\n                }\n\n                // Capitalize first letter.\n                var firstCap = match === match.replace(/\\w/i, function(letter) {\n                    return letter.toUpperCase();\n                });\n                if (firstCap) {\n                    return value.charAt(0).toUpperCase() + value.slice(1);\n                }\n\n                return value;\n            })\n        });\n        return message;\n    };\n\n    /**\n     * Checks if the given `count` is within the interval defined by the {string} `interval`\n     *\n     * @param  count     {int}    The amount of items.\n     * @param  interval  {string} The interval to be compared with the count.\n     * @return {boolean}          Returns true if count is within interval; false otherwise.\n     */\n    Lang.prototype._testInterval = function(count, interval) {\n        /**\n         * From the Symfony\\Component\\Translation\\Interval Docs\n         *\n         * Tests if a given number belongs to a given math interval.\n         *\n         * An interval can represent a finite set of numbers:\n         *\n         *  {1,2,3,4}\n         *\n         * An interval can represent numbers between two numbers:\n         *\n         *  [1, +Inf]\n         *  ]-1,2[\n         *\n         * The left delimiter can be [ (inclusive) or ] (exclusive).\n         * The right delimiter can be [ (exclusive) or ] (inclusive).\n         * Beside numbers, you can use -Inf and +Inf for the infinite.\n         */\n\n        if (typeof interval !== 'string') {\n            throw 'Invalid interval: should be a string.';\n        }\n\n        interval = interval.trim();\n\n        var matches = interval.match(intervalRegexp);\n        if (!matches) {\n            throw 'Invalid interval: ' + interval;\n        }\n\n        if (matches[2]) {\n            var items = matches[2].split(',');\n            for (var i = 0; i < items.length; i++) {\n                if (parseInt(items[i], 10) === count) {\n                    return true;\n                }\n            }\n        } else {\n            // Remove falsy values.\n            matches = matches.filter(function(match) {\n                return !!match;\n            });\n\n            var leftDelimiter = matches[1];\n            var leftNumber = convertNumber(matches[2]);\n            if (leftNumber === Infinity) {\n                leftNumber = -Infinity;\n            }\n            var rightNumber = convertNumber(matches[3]);\n            var rightDelimiter = matches[4];\n\n            return (leftDelimiter === '[' ? count >= leftNumber : count > leftNumber)\n                && (rightDelimiter === ']' ? count <= rightNumber : count < rightNumber);\n        }\n\n        return false;\n    };\n\n    /**\n     * Returns the plural position to use for the given locale and number.\n     *\n     * The plural rules are derived from code of the Zend Framework (2010-09-25),\n     * which is subject to the new BSD license (http://framework.zend.com/license/new-bsd).\n     * Copyright (c) 2005-2010 Zend Technologies USA Inc. (http://www.zend.com)\n     *\n     * @param {Number} count\n     * @param {String} locale\n     * @return {Number}\n     */\n    Lang.prototype._getPluralForm = function(count, locale) {\n        switch (locale) {\n            case 'az':\n            case 'bo':\n            case 'dz':\n            case 'id':\n            case 'ja':\n            case 'jv':\n            case 'ka':\n            case 'km':\n            case 'kn':\n            case 'ko':\n            case 'ms':\n            case 'th':\n            case 'tr':\n            case 'vi':\n            case 'zh':\n                return 0;\n\n            case 'af':\n            case 'bn':\n            case 'bg':\n            case 'ca':\n            case 'da':\n            case 'de':\n            case 'el':\n            case 'en':\n            case 'eo':\n            case 'es':\n            case 'et':\n            case 'eu':\n            case 'fa':\n            case 'fi':\n            case 'fo':\n            case 'fur':\n            case 'fy':\n            case 'gl':\n            case 'gu':\n            case 'ha':\n            case 'he':\n            case 'hu':\n            case 'is':\n            case 'it':\n            case 'ku':\n            case 'lb':\n            case 'ml':\n            case 'mn':\n            case 'mr':\n            case 'nah':\n            case 'nb':\n            case 'ne':\n            case 'nl':\n            case 'nn':\n            case 'no':\n            case 'om':\n            case 'or':\n            case 'pa':\n            case 'pap':\n            case 'ps':\n            case 'pt':\n            case 'so':\n            case 'sq':\n            case 'sv':\n            case 'sw':\n            case 'ta':\n            case 'te':\n            case 'tk':\n            case 'ur':\n            case 'zu':\n                return (count == 1)\n                    ? 0\n                    : 1;\n\n            case 'am':\n            case 'bh':\n            case 'fil':\n            case 'fr':\n            case 'gun':\n            case 'hi':\n            case 'hy':\n            case 'ln':\n            case 'mg':\n            case 'nso':\n            case 'xbr':\n            case 'ti':\n            case 'wa':\n                return ((count === 0) || (count === 1))\n                    ? 0\n                    : 1;\n\n            case 'be':\n            case 'bs':\n            case 'hr':\n            case 'ru':\n            case 'sr':\n            case 'uk':\n                return ((count % 10 == 1) && (count % 100 != 11))\n                    ? 0\n                    : (((count % 10 >= 2) && (count % 10 <= 4) && ((count % 100 < 10) || (count % 100 >= 20)))\n                        ? 1\n                        : 2);\n\n            case 'cs':\n            case 'sk':\n                return (count == 1)\n                    ? 0\n                    : (((count >= 2) && (count <= 4))\n                        ? 1\n                        : 2);\n\n            case 'ga':\n                return (count == 1)\n                    ? 0\n                    : ((count == 2)\n                        ? 1\n                        : 2);\n\n            case 'lt':\n                return ((count % 10 == 1) && (count % 100 != 11))\n                    ? 0\n                    : (((count % 10 >= 2) && ((count % 100 < 10) || (count % 100 >= 20)))\n                        ? 1\n                        : 2);\n\n            case 'sl':\n                return (count % 100 == 1)\n                    ? 0\n                    : ((count % 100 == 2)\n                        ? 1\n                        : (((count % 100 == 3) || (count % 100 == 4))\n                            ? 2\n                            : 3));\n\n            case 'mk':\n                return (count % 10 == 1)\n                    ? 0\n                    : 1;\n\n            case 'mt':\n                return (count == 1)\n                    ? 0\n                    : (((count === 0) || ((count % 100 > 1) && (count % 100 < 11)))\n                        ? 1\n                        : (((count % 100 > 10) && (count % 100 < 20))\n                            ? 2\n                            : 3));\n\n            case 'lv':\n                return (count === 0)\n                    ? 0\n                    : (((count % 10 == 1) && (count % 100 != 11))\n                        ? 1\n                        : 2);\n\n            case 'pl':\n                return (count == 1)\n                    ? 0\n                    : (((count % 10 >= 2) && (count % 10 <= 4) && ((count % 100 < 12) || (count % 100 > 14)))\n                        ? 1\n                        : 2);\n\n            case 'cy':\n                return (count == 1)\n                    ? 0\n                    : ((count == 2)\n                        ? 1\n                        : (((count == 8) || (count == 11))\n                            ? 2\n                            : 3));\n\n            case 'ro':\n                return (count == 1)\n                    ? 0\n                    : (((count === 0) || ((count % 100 > 0) && (count % 100 < 20)))\n                        ? 1\n                        : 2);\n\n            case 'ar':\n                return (count === 0)\n                    ? 0\n                    : ((count == 1)\n                        ? 1\n                        : ((count == 2)\n                            ? 2\n                            : (((count % 100 >= 3) && (count % 100 <= 10))\n                                ? 3\n                                : (((count % 100 >= 11) && (count % 100 <= 99))\n                                    ? 4\n                                    : 5))));\n\n            default:\n                return 0;\n        }\n    };\n\n    return Lang;\n\n}));\n","\nimport Lang from 'lang.js';\n\nexport default class TranslationHelper extends Lang {\n    constructor(options) {\n        super(options);\n        this.messages = options.messages;\n    }\n\n    // Overwrite _parseKey of lang.js import to remove the need\n    // to include locale prefix in translation keys\n    _parseKey(key) {\n        if (typeof key !== 'string') {\n            return null;\n        }\n\n        const segments = key.split('.');\n        const source = segments[0].replace(/\\//g, '.');\n\n        return {\n            source,\n            sourceFallback: source,\n            entries: segments.slice(1)\n        };\n    }\n}\n","\nimport React from 'react';\nimport PropTypes from 'prop-types';\n\nimport TranslationHelper from './TranslationHelper';\n\nclass Translatable extends React.Component {\n    constructor(props) {\n        super(props);\n        this.langHelper = new TranslationHelper({\n            messages: props.lang\n        });\n        this.applyPropsAndContentToChildren = this.applyPropsAndContentToChildren.bind(this);\n        this.handleAttributes = this.handleAttributes.bind(this);\n        this.handleNestedAttributes = this.handleNestedAttributes.bind(this);\n        this.mungeString = this.mungeString.bind(this);\n        this.removeUnwantedProps = this.removeUnwantedProps.bind(this);\n    }\n\n    applyPropsAndContentToChildren(props, content = null) {\n        return React.Children.map(this.props.children, child => {\n            const propsToApply = {\n                ...child.props,\n                ...props\n            };\n            for (const key in child.props) {\n                if (props[key]) {\n                    if (props[key] instanceof Object) {\n                        propsToApply[key] = {\n                            ...child.props[key],\n                            ...props[key]\n                        };\n                    } else if (typeof props[key] === 'string') {\n                        propsToApply[key] = `${child.props[key]} ${props[key]}`;\n                    }\n                }\n            }\n            if (props.nestedAttributes) {\n                for (const key in child.props) {\n                    if (props.nestedAttributes[key]) {\n                        const prop = child.props[key];\n                        if (prop && prop instanceof Object && propsToApply[key]) {\n                            propsToApply[key] = {\n                                ...prop,\n                                ...props[key]\n                            };\n                        }\n                    }\n                }\n            }\n            let updatedChild = React.cloneElement(child, propsToApply, content);\n            if (child.props.children) {\n                updatedChild = React.cloneElement(child, propsToApply, child.props.children);\n            }\n            return updatedChild;\n        });\n    }\n\n    handleAttributes(props) {\n        const newProps = { ...props };\n        for (const key in newProps.attributes) {\n            const attribute = newProps.attributes[key];\n            if (attribute) {\n                const transString = this.mungeString(attribute);\n                newProps[key] = transString;\n            }\n        }\n        return newProps;\n    }\n\n    handleNestedAttributes(props) {\n        const newProps = { ...props };\n        for (const key in newProps.nestedAttributes) {\n            const nestedAttribute = newProps.nestedAttributes[key];\n            if (nestedAttribute) {\n                for (const k in nestedAttribute) {\n                    const attribute = nestedAttribute[k];\n                    if (attribute) {\n                        const transString = this.mungeString(attribute);\n                        newProps[key] = {};\n                        newProps[key][k] = transString;\n                    }\n                }\n            }\n        }\n        return newProps;\n    }\n\n    mungeString({ transKey, count, replacements }) {\n        if (typeof count !== 'undefined' && typeof replacements !== 'undefined') {\n            return this.langHelper.choice(transKey, count, replacements);\n        } else if (typeof count === 'undefined' && typeof replacements !== 'undefined') {\n            if (this.props.handleError) {\n                this.props.handleError({\n                    message: 'Replacements were given without the required count property',\n                    name: 'No count supplied'\n                });\n            } else {\n                throw new Error('Replacements were given without the required count property');\n            }\n        }\n        return this.langHelper.get(transKey);\n    }\n\n    removeUnwantedProps() {\n        const props = { ...this.props };\n        delete props.store;\n        delete props.storeSubscription;\n        delete props.dispatch;\n        delete props.lang;\n        return props;\n    }\n\n    render() {\n        if (this.props.children && React.Children.count(this.props.children) > 1) {\n            if (this.props.handleError) {\n                this.props.handleError({\n                    message: 'The Translatable component only allows a single child',\n                    name: 'Too many children'\n                });\n            } else {\n                throw new Error('The Translatable component only allows a single child');\n            }\n        }\n        let props = this.removeUnwantedProps();\n        const content = props.content;\n        delete props.content;\n        delete props.handleError;\n        if (props.className) {\n            props.className = `translatable ${props.className}`;\n        } else {\n            props.className = 'translatable';\n        }\n        if (props.attributes) {\n            props = this.handleAttributes(props);\n            delete props.attributes;\n        }\n        if (props.nestedAttributes) {\n            props = this.handleNestedAttributes(props);\n        }\n        if (this.props.children) {\n            delete props.children;\n            let children;\n            if (content) {\n                const translatedString = this.mungeString(content);\n                children = this.applyPropsAndContentToChildren(props, translatedString);\n            } else {\n                children = this.applyPropsAndContentToChildren(props);\n            }\n            const component = children[0];\n            return React.createElement(component.type, component.props);\n        }\n        return (\n            <span {...props}>{this.mungeString(content)}</span>\n        );\n    }\n}\n\nTranslatable.propTypes = {\n    attributes: PropTypes.object,\n    children: PropTypes.node,\n    className: PropTypes.string,\n    content: PropTypes.shape({\n        transKey: PropTypes.string.isRequired,\n        count: PropTypes.number,\n        replacements: PropTypes.objectOf(PropTypes.oneOfType([PropTypes.string, PropTypes.number]))\n    }),\n    handleError: PropTypes.func,\n    id: PropTypes.oneOfType([PropTypes.number, PropTypes.string]),\n    lang: PropTypes.objectOf(PropTypes.object).isRequired\n};\n\nexport default Translatable;\n"],"names":["factory","convertNumber","str","Infinity","parseInt","intervalRegexp","anyIntervalRegexp","defaults","Lang","options","this","locale","document","documentElement","lang","inferLocale","fallback","messages","prototype","setMessages","getLocale","setLocale","getFallback","setFallback","has","key","_getMessage","get","replacements","message","_applyReplacements","trans","choice","number","count","undefined","messageParts","split","explicitRules","i","length","trim","test","messageSpaceSplit","push","shift","join","j","_testInterval","_getLocale","_getPluralForm","transChoice","_parseKey","segments","source","replace","sourceFallback","entries","slice","subKey","concat","_findMessageInTree","pathSegments","tree","dottedKey","_sortReplacementKeys","a","b","Object","keys","sort","forEach","RegExp","match","value","toUpperCase","letter","charAt","interval","matches","leftDelimiter","filter","leftNumber","rightNumber","rightDelimiter","items","module","TranslationHelper","props","langHelper","applyPropsAndContentToChildren","_this","bind","handleAttributes","handleNestedAttributes","mungeString","removeUnwantedProps","content","React","Children","map","children","propsToApply","child","nestedAttributes","prop","updatedChild","cloneElement","newProps","attributes","attribute","transString","nestedAttribute","k","transKey","handleError","Error","store","storeSubscription","dispatch","className","translatedString","component","createElement","type","h","Component"],"mappings":"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"}